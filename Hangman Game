import tkinter as tk
import random

class HangmanGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Hangman Game")
        
        self.word = self.choose_word()
        self.guessed_letters = set()
        self.incorrect_guesses = 0
        self.max_incorrect_guesses = 6
        
        self.setup_gui()

    def choose_word(self):
        words = ['python', 'hangman', 'challenge', 'programming', 'random', 'word', 'guess', 'game']
        return random.choice(words)

    def setup_gui(self):
        self.canvas = tk.Canvas(self.root, width=200, height=300)
        self.canvas.pack(pady=20)
        
        self.word_label = tk.Label(self.root, text=self.display_word(), font=("Helvetica", 24))
        self.word_label.pack(pady=20)
        
        self.info_label = tk.Label(self.root, text=f"Incorrect guesses left: {self.max_incorrect_guesses}", font=("Helvetica", 14))
        self.info_label.pack(pady=10)
        
        self.entry = tk.Entry(self.root, font=("Helvetica", 18))
        self.entry.pack(pady=10)
        
        self.guess_button = tk.Button(self.root, text="Guess", command=self.make_guess, font=("Helvetica", 14))
        self.guess_button.pack(pady=10)
        
        self.result_label = tk.Label(self.root, text="", font=("Helvetica", 18))
        self.result_label.pack(pady=20)
        
        self.draw_hangman()

    def display_word(self):
        return ' '.join([letter if letter in self.guessed_letters else '_' for letter in self.word])

    def draw_hangman(self):
        self.canvas.delete("all")
        if self.incorrect_guesses > 0:
            self.canvas.create_line(50, 250, 150, 250, width=2)  # Base
        if self.incorrect_guesses > 1:
            self.canvas.create_line(100, 250, 100, 50, width=2)   # Pole
        if self.incorrect_guesses > 2:
            self.canvas.create_line(100, 50, 150, 50, width=2)    # Top bar
        if self.incorrect_guesses > 3:
            self.canvas.create_line(150, 50, 150, 100, width=2)   # Rope
        if self.incorrect_guesses > 4:
            self.canvas.create_oval(130, 100, 170, 140, width=2)  # Head
        if self.incorrect_guesses > 5:
            self.canvas.create_line(150, 140, 150, 200, width=2)  # Body
            self.canvas.create_line(150, 160, 130, 180, width=2)  # Left arm
            self.canvas.create_line(150, 160, 170, 180, width=2)  # Right arm
            self.canvas.create_line(150, 200, 130, 230, width=2)  # Left leg
            self.canvas.create_line(150, 200, 170, 230, width=2)  # Right leg

    def make_guess(self):
        guess = self.entry.get().lower()
        self.entry.delete(0, tk.END)

        if len(guess) != 1 or not guess.isalpha():
            self.result_label.config(text="Invalid input. Please guess a single letter.")
            return

        if guess in self.guessed_letters:
            self.result_label.config(text=f"You've already guessed the letter '{guess}'.")
            return

        self.guessed_letters.add(guess)

        if guess in self.word:
            self.word_label.config(text=self.display_word())
            self.result_label.config(text=f"Good guess!")
        else:
            self.incorrect_guesses += 1
            self.draw_hangman()
            self.info_label.config(text=f"Incorrect guesses left: {self.max_incorrect_guesses - self.incorrect_guesses}")
            self.result_label.config(text=f"Incorrect guess!")

        if all(letter in self.guessed_letters for letter in self.word):
            self.result_label.config(text=f"Congratulations! You've guessed the word '{self.word}' correctly!")
            self.guess_button.config(state="disabled")
            self.entry.config(state="disabled")
        elif self.incorrect_guesses >= self.max_incorrect_guesses:
            self.result_label.config(text=f"Sorry, you've run out of guesses. The word was '{self.word}'.")
            self.guess_button.config(state="disabled")
            self.entry.config(state="disabled")

if __name__ == "__main__":
    root = tk.Tk()
    game = HangmanGame(root)
    root.mainloop()
