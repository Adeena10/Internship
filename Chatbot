import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import requests
import json
import random
import nltk
from nltk.stem import WordNetLemmatizer
import pickle
import numpy as np
from tensorflow.keras.models import load_model
import threading
from datetime import datetime

# Initialize NLTK lemmatizer
lemmatizer = WordNetLemmatizer()

# Ensure necessary NLTK data is downloaded
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

try:
    nltk.data.find('corpora/wordnet')
except LookupError:
    nltk.download('wordnet')

# Load necessary data files
try:
    with open('intents.json') as file:
        intents = json.load(file)
except FileNotFoundError:
    messagebox.showerror("Error", "intents.json file not found.")
    exit()

try:
    with open('words.pkl','rb') as f:
        words = pickle.load(f)
except FileNotFoundError:
    messagebox.showerror("Error", "words.pkl file not found.")
    exit()

try:
    with open('classes.pkl','rb') as f:
        classes = pickle.load(f)
except FileNotFoundError:
    messagebox.showerror("Error", "classes.pkl file not found.")
    exit()

try:
    model = load_model('chatbot_model.h5')
except FileNotFoundError:
    messagebox.showerror("Error", "chatbot_model.h5 file not found.")
    exit()
except Exception as e:
    messagebox.showerror("Error", f"Failed to load chatbot_model.h5: {e}")
    exit()

def clean_up_sentence(sentence):
    """
    Tokenize and lemmatize the input sentence.
    """
    # Tokenize the sentence into words
    sentence_words = nltk.word_tokenize(sentence)
    # Lemmatize and lowercase each word
    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
    return sentence_words

def bow(sentence, words, show_details=True):
    """
    Create a bag-of-words array from the input sentence.
    """
    # Tokenize the sentence into words
    sentence_words = clean_up_sentence(sentence)
    # Initialize the bag with 0 for each word
    bag = [0]*len(words)
    for s in sentence_words:
        for i,w in enumerate(words):
            if w == s:
                bag[i] = 1
                if show_details:
                    print(f"Found in bag: {w}")
    return(np.array(bag))

def predict_class(sentence, model):
    """
    Predict the class (intent) of the input sentence using the model.
    """
    # Generate bag of words
    p = bow(sentence, words, show_details=False)
    # Predict probabilities for each class
    res = model.predict(np.array([p]))[0]
    ERROR_THRESHOLD = 0.25
    # Filter out predictions below the threshold
    results = [[i,r] for i,r in enumerate(res) if r>ERROR_THRESHOLD]
    # Sort by probability
    results.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in results:
        return_list.append({"intent": classes[r[0]], "probability": str(r[1])})
    return return_list

def getResponse(ints, intents_json):
    """
    Get a random response based on the predicted intent.
    """
    if not ints:
        return "I didn't understand that. Can you rephrase?"
    tag = ints[0]['intent']
    list_of_intents = intents_json['intents']
    for i in list_of_intents:
        if(i['tag'] == tag):
            result = random.choice(i['responses'])
            break
    return result

def chatbot_response(msg):
    """
    Generate a response from the chatbot based on the user's message.
    """
    ints = predict_class(msg, model)
    res = getResponse(ints, intents)
    return res

# Creating GUI with tkinter
class ChatbotGUI:
    def __init__(self, master):
        self.master = master
        master.title("Chatbot")
        master.geometry("500x600")
        master.resizable(width=False, height=False)

        # Create Chat window
        self.chat_log = tk.Text(master, bd=0, bg="white", height="20", width="50", font="Arial")
        self.chat_log.config(state=tk.DISABLED)

        # Bind scrollbar to Chat window
        self.scrollbar = tk.Scrollbar(master, command=self.chat_log.yview)
        self.chat_log['yscrollcommand'] = self.scrollbar.set

        # Create Send button
        self.send_button = tk.Button(master, font=("Verdana",12,'bold'), text="Send", width="12", height=5,
                                     bd=0, bg="#32de97", activebackground="#3c9d9b", fg='#ffffff',
                                     command=self.send)

        # Create the box to enter message
        self.entry_box = tk.Text(master, bd=0, bg="white", width="29", height="5", font="Arial")
        self.entry_box.bind("<Return>", self.send_enter)

        # Place all components on the screen
        self.scrollbar.place(x=476, y=6, height=486)
        self.chat_log.place(x=6, y=6, height=486, width=470)
        self.entry_box.place(x=6, y=500, height=90, width=365)
        self.send_button.place(x=380, y=500, height=90)

        # Status Message Label
        self.status_label = tk.Label(master, text="", fg="green")
        self.status_label.place(x=6, y=595)

    def send_enter(self, event):
        """
        Handle the Enter key press to send a message.
        """
        self.send()
        return 'break'  # Prevents the default behavior of the Enter key

    def send(self):
        """
        Handle sending a message from the user to the chatbot.
        """
        msg = self.entry_box.get("1.0",'end-1c').strip()
        if msg != '':
            self.entry_box.delete("0.0", tk.END)
            self.chat_log.config(state=tk.NORMAL)
            self.chat_log.insert(tk.END, "You: " + msg + '\n\n')
            self.chat_log.config(foreground="#442265", font=("Verdana", 12 ))

            # Start thread to get response
            threading.Thread(target=self.get_bot_response, args=(msg,)).start()

    def get_bot_response(self, msg):
        """
        Get the chatbot's response in a separate thread.
        """
        try:
            res = chatbot_response(msg)
        except Exception as e:
            res = "Sorry, I encountered an error. Please try again later."
            print(f"Error: {e}")
        self.chat_log.config(state=tk.NORMAL)
        self.chat_log.insert(tk.END, "Bot: " + res + '\n\n')
        self.chat_log.config(state=tk.DISABLED)
        self.chat_log.yview(tk.END)

def main():
    """
    Initialize and run the chatbot GUI.
    """
    root = tk.Tk()
    gui = ChatbotGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
