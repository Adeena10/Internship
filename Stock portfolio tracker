import tkinter as tk
from tkinter import messagebox
import requests
import threading
import time
import json
import os
import pathlib

class StockPortfolio:
    def __init__(self, master):
        self.master = master
        self.master.title("Stock Portfolio Tracker")
        self.stocks = {}
        self.api_key = "YOUR_ALPHA_VANTAGE_API_KEY"  # Replace with your actual Alpha Vantage API key
        self.portfolio_file = 'portfolio.json'

        # UI Elements
        self.create_widgets()
        self.load_portfolio()
        self.update_total_value()

    def create_widgets(self):
        # Stock Symbol Entry
        tk.Label(self.master, text="Stock Symbol:").grid(row=0, column=0, padx=5, pady=5, sticky='e')
        self.symbol_entry = tk.Entry(self.master)
        self.symbol_entry.grid(row=0, column=1, padx=5, pady=5, sticky='w')

        # Quantity Entry
        tk.Label(self.master, text="Quantity:").grid(row=1, column=0, padx=5, pady=5, sticky='e')
        self.quantity_entry = tk.Entry(self.master)
        self.quantity_entry.grid(row=1, column=1, padx=5, pady=5, sticky='w')

        # Purchase Price Entry
        tk.Label(self.master, text="Purchase Price:").grid(row=2, column=0, padx=5, pady=5, sticky='e')
        self.purchase_price_entry = tk.Entry(self.master)
        self.purchase_price_entry.grid(row=2, column=1, padx=5, pady=5, sticky='w')

        # Add Button
        self.add_button = tk.Button(self.master, text="Add Stock", command=self.add_stock)
        self.add_button.grid(row=0, column=2, rowspan=3, padx=5, pady=5, sticky='ns')

        # Stock Listbox with Scrollbar
        self.scrollbar = tk.Scrollbar(self.master)
        self.scrollbar.grid(row=3, column=3, sticky='ns')
        self.stock_listbox = tk.Listbox(self.master, width=100, yscrollcommand=self.scrollbar.set)
        self.stock_listbox.grid(row=3, column=0, columnspan=3, padx=5, pady=5)
        self.scrollbar.config(command=self.stock_listbox.yview)

        # Remove Button
        self.remove_button = tk.Button(self.master, text="Remove Selected Stock", command=self.remove_stock)
        self.remove_button.grid(row=4, column=1, padx=5, pady=5, sticky='e')

        # Refresh Prices Button
        self.refresh_button = tk.Button(self.master, text="Refresh Prices", command=self.refresh_prices)
        self.refresh_button.grid(row=4, column=2, padx=5, pady=5, sticky='w')

        # Total Portfolio Value Label
        self.total_value_label = tk.Label(self.master, text="Total Portfolio Value: $0.00", font=("Helvetica", 12, "bold"))
        self.total_value_label.grid(row=5, column=0, columnspan=3, padx=5, pady=10)

        # Status Message Label
        self.status_label = tk.Label(self.master, text="", fg="green")
        self.status_label.grid(row=6, column=0, columnspan=3, padx=5, pady=5)

    def load_portfolio(self):
        if not os.path.isfile(self.portfolio_file):
            # If the portfolio file doesn't exist, initialize an empty portfolio
            self.stocks = {}
            return

        try:
            with open(self.portfolio_file, 'r') as f:
                self.stocks = json.load(f)
            for symbol, details in self.stocks.items():
                self.stock_listbox.insert(tk.END, self.format_stock_display(symbol, details))
        except json.JSONDecodeError:
            messagebox.showerror("Error", "Failed to load portfolio data. The file might be corrupted.")
            self.stocks = {}

    def save_portfolio(self):
        with open(self.portfolio_file, 'w') as f:
            json.dump(self.stocks, f, indent=4)

    def format_stock_display(self, symbol, details):
        current_value = details.get('price', 0) * details.get('quantity', 0)
        purchase_total = details.get('purchase_price', 0) * details.get('quantity', 0)
        gain_loss = current_value - purchase_total
        return (f"{symbol} | Qty: {details.get('quantity')} | "
                f"Purchase Price: ${details.get('purchase_price'):.2f} | "
                f"Current Price: ${details.get('price', 0):.2f} | "
                f"Gain/Loss: ${gain_loss:.2f}")

    def add_stock(self):
        symbol = self.symbol_entry.get().upper().strip()
        quantity = self.quantity_entry.get().strip()
        purchase_price = self.purchase_price_entry.get().strip()

        # Input Validation
        if not symbol or not quantity or not purchase_price:
            self.update_status("All fields are required.", "red")
            return

        if symbol in self.stocks:
            self.update_status("Stock already exists in the portfolio.", "red")
            return

        try:
            quantity = int(quantity)
            purchase_price = float(purchase_price)
            if quantity <= 0 or purchase_price <= 0:
                raise ValueError
        except ValueError:
            self.update_status("Quantity and Purchase Price must be positive numbers.", "red")
            return

        # Disable Add Button to prevent multiple clicks
        self.add_button.config(state=tk.DISABLED)
        self.update_status("Adding stock...", "blue")

        # Use threading to prevent GUI from freezing
        threading.Thread(target=self._add_stock_thread, args=(symbol, quantity, purchase_price)).start()

    def _add_stock_thread(self, symbol, quantity, purchase_price):
        try:
            price = self.get_stock_price(symbol)
            self.stocks[symbol] = {
                'quantity': quantity,
                'purchase_price': purchase_price,
                'price': price
            }
            # Update UI in the main thread
            self.master.after(0, self._update_ui_after_add, symbol)
        except Exception as e:
            self.master.after(0, self.update_status, f"Failed to add stock: {e}", "red")
        finally:
            self.master.after(0, self.add_button.config, {'state': tk.NORMAL})

    def _update_ui_after_add(self, symbol):
        self.stock_listbox.insert(tk.END, self.format_stock_display(symbol, self.stocks[symbol]))
        self.save_portfolio()
        self.update_total_value()
        self.update_status(f"Added {symbol} successfully.", "green")
        # Clear input fields
        self.symbol_entry.delete(0, tk.END)
        self.quantity_entry.delete(0, tk.END)
        self.purchase_price_entry.delete(0, tk.END)

    def remove_stock(self):
        selected_indices = self.stock_listbox.curselection()
        if not selected_indices:
            self.update_status("Please select a stock to remove.", "red")
            return

        for index in reversed(selected_indices):
            stock_display = self.stock_listbox.get(index)
            symbol = stock_display.split(" | ")[0]
            del self.stocks[symbol]
            self.stock_listbox.delete(index)

        self.save_portfolio()
        self.update_total_value()
        self.update_status("Selected stock(s) removed successfully.", "green")

    def refresh_prices(self):
        if not self.stocks:
            self.update_status("Portfolio is empty.", "red")
            return

        # Disable Refresh Button to prevent multiple clicks
        self.refresh_button.config(state=tk.DISABLED)
        self.update_status("Refreshing prices...", "blue")

        # Use threading to prevent GUI from freezing
        threading.Thread(target=self._refresh_prices_thread).start()

    def _refresh_prices_thread(self):
        for i, (symbol, details) in enumerate(self.stocks.items()):
            try:
                price = self.get_stock_price(symbol)
                self.stocks[symbol]['price'] = price
                # Update Listbox in the main thread
                self.master.after(0, self._update_listbox_item, i, symbol)
                self.master.after(0, self.update_status, f"Prices updated for {symbol}.", "green")
                # To respect API rate limits
                time.sleep(12)  # Alpha Vantage allows 5 requests per minute
            except Exception as e:
                self.master.after(0, self.update_status, f"Failed to refresh {symbol}: {e}", "red")

        self.master.after(0, self.update_total_value)
        self.master.after(0, self.refresh_button.config, {'state': tk.NORMAL})
        self.master.after(0, self.update_status, "Prices refreshed successfully.", "green")

    def _update_listbox_item(self, index, symbol):
        self.stock_listbox.delete(index)
        self.stock_listbox.insert(index, self.format_stock_display(symbol, self.stocks[symbol]))

    def update_total_value(self):
        total = sum(details['price'] * details['quantity'] for details in self.stocks.values())
        self.total_value_label.config(text=f"Total Portfolio Value: ${total:,.2f}")

    def update_status(self, message, color):
        self.status_label.config(text=message, fg=color)
        if color in ["green", "blue"]:
            # Clear status after 5 seconds for positive messages
            self.master.after(5000, lambda: self.status_label.config(text=""))

    def get_stock_price(self, symbol):
        url = f"https://www.alphavantage.co/query"
        params = {
            'function': 'GLOBAL_QUOTE',
            'symbol': symbol,
            'apikey': self.api_key
        }
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if "Global Quote" in data and "05. price" in data["Global Quote"]:
            return float(data["Global Quote"]["05. price"])
        elif "Note" in data:
            raise Exception("API rate limit reached. Please wait and try again later.")
        else:
            raise ValueError(f"Invalid response for symbol: {symbol}")

def main():
    root = tk.Tk()
    app = StockPortfolio(root)
    root.mainloop()

if __name__ == "__main__":
    main()
